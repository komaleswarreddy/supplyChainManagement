import { pgTable, uuid, text, timestamp, numeric, integer, boolean, jsonb } from 'drizzle-orm/pg-core';
import { users } from './users';

export const suppliers = pgTable('suppliers', {
  id: uuid('id').primaryKey().defaultRandom(),
  tenantId: uuid('tenant_id').notNull(),
  name: text('name').notNull(),
  code: text('code').notNull(),
  type: text('type').notNull(),
  status: text('status').notNull().default('DRAFT'),
  taxId: text('tax_id').notNull(),
  registrationNumber: text('registration_number').notNull(),
  website: text('website'),
  industry: text('industry'),
  description: text('description'),
  yearEstablished: integer('year_established'),
  annualRevenue: numeric('annual_revenue', { precision: 15, scale: 2 }),
  employeeCount: integer('employee_count'),
  businessClassifications: text('business_classifications').array(),
  categories: text('categories').array().notNull(),
  paymentTerms: text('payment_terms'),
  preferredCurrency: text('preferred_currency'),
  onboardingDate: timestamp('onboarding_date', { withTimezone: true }),
  qualificationStatus: text('qualification_status'),
  qualificationScore: integer('qualification_score'),
  qualificationDate: timestamp('qualification_date', { withTimezone: true }),
  notes: text('notes'),
  createdAt: timestamp('created_at', { withTimezone: true }).notNull().defaultNow(),
  updatedAt: timestamp('updated_at', { withTimezone: true }).notNull().defaultNow(),
  createdBy: uuid('created_by').notNull().references(() => users.id),
  updatedBy: uuid('updated_by').references(() => users.id),
});

export const supplierAddresses = pgTable('supplier_addresses', {
  id: uuid('id').primaryKey().defaultRandom(),
  tenantId: uuid('tenant_id').notNull(),
  supplierId: uuid('supplier_id').notNull().references(() => suppliers.id),
  type: text('type').notNull(),
  street: text('street').notNull(),
  city: text('city').notNull(),
  state: text('state').notNull(),
  country: text('country').notNull(),
  postalCode: text('postal_code').notNull(),
  isPrimary: boolean('is_primary').notNull().default(false),
  createdAt: timestamp('created_at', { withTimezone: true }).notNull().defaultNow(),
  updatedAt: timestamp('updated_at', { withTimezone: true }).notNull().defaultNow(),
});

export const supplierContacts = pgTable('supplier_contacts', {
  id: uuid('id').primaryKey().defaultRandom(),
  tenantId: uuid('tenant_id').notNull(),
  supplierId: uuid('supplier_id').notNull().references(() => suppliers.id),
  firstName: text('first_name').notNull(),
  lastName: text('last_name').notNull(),
  title: text('title').notNull(),
  email: text('email').notNull(),
  phone: text('phone').notNull(),
  isPrimary: boolean('is_primary').notNull().default(false),
  department: text('department'),
  createdAt: timestamp('created_at', { withTimezone: true }).notNull().defaultNow(),
  updatedAt: timestamp('updated_at', { withTimezone: true }).notNull().defaultNow(),
});

export const supplierBankInformation = pgTable('supplier_bank_information', {
  id: uuid('id').primaryKey().defaultRandom(),
  tenantId: uuid('tenant_id').notNull(),
  supplierId: uuid('supplier_id').notNull().references(() => suppliers.id),
  bankName: text('bank_name').notNull(),
  accountName: text('account_name').notNull(),
  accountNumber: text('account_number').notNull(),
  routingNumber: text('routing_number').notNull(),
  currency: text('currency').notNull(),
  swiftCode: text('swift_code'),
  iban: text('iban'),
  createdAt: timestamp('created_at', { withTimezone: true }).notNull().defaultNow(),
  updatedAt: timestamp('updated_at', { withTimezone: true }).notNull().defaultNow(),
});

export const supplierDocuments = pgTable('supplier_documents', {
  id: uuid('id').primaryKey().defaultRandom(),
  tenantId: uuid('tenant_id').notNull(),
  supplierId: uuid('supplier_id').notNull().references(() => suppliers.id),
  name: text('name').notNull(),
  type: text('type').notNull(),
  url: text('url').notNull(),
  uploadedById: uuid('uploaded_by_id').notNull().references(() => users.id),
  uploadedAt: timestamp('uploaded_at', { withTimezone: true }).notNull(),
  expiryDate: timestamp('expiry_date', { withTimezone: true }),
  status: text('status').notNull().default('ACTIVE'),
  createdAt: timestamp('created_at', { withTimezone: true }).notNull().defaultNow(),
  updatedAt: timestamp('updated_at', { withTimezone: true }).notNull().defaultNow(),
});

export const supplierQualifications = pgTable('supplier_qualifications', {
  id: uuid('id').primaryKey().defaultRandom(),
  tenantId: uuid('tenant_id').notNull(),
  supplierId: uuid('supplier_id').notNull().references(() => suppliers.id),
  status: text('status').notNull().default('PENDING'),
  questionnaire: jsonb('questionnaire').notNull(),
  requiredDocuments: jsonb('required_documents').notNull(),
  overallScore: integer('overall_score'),
  maxPossibleScore: integer('max_possible_score').notNull(),
  startedAt: timestamp('started_at', { withTimezone: true }),
  completedAt: timestamp('completed_at', { withTimezone: true }),
  evaluatedById: uuid('evaluated_by_id').references(() => users.id),
  evaluatedAt: timestamp('evaluated_at', { withTimezone: true }),
  approvalWorkflow: jsonb('approval_workflow'),
  notes: text('notes'),
  createdAt: timestamp('created_at', { withTimezone: true }).notNull().defaultNow(),
  updatedAt: timestamp('updated_at', { withTimezone: true }).notNull().defaultNow(),
  createdBy: uuid('created_by').notNull().references(() => users.id),
});

export const supplierRiskAssessments = pgTable('supplier_risk_assessments', {
  id: uuid('id').primaryKey().defaultRandom(),
  tenantId: uuid('tenant_id').notNull(),
  supplierId: uuid('supplier_id').notNull().references(() => suppliers.id),
  assessmentDate: timestamp('assessment_date', { withTimezone: true }).notNull(),
  status: text('status').notNull().default('PENDING'),
  overallRiskLevel: text('overall_risk_level').notNull(),
  overallScore: integer('overall_score').notNull(),
  categories: jsonb('categories').notNull(),
  mitigationPlans: jsonb('mitigation_plans'),
  nextAssessmentDate: timestamp('next_assessment_date', { withTimezone: true }).notNull(),
  assessedById: uuid('assessed_by_id').notNull().references(() => users.id),
  notes: text('notes'),
  createdAt: timestamp('created_at', { withTimezone: true }).notNull().defaultNow(),
  updatedAt: timestamp('updated_at', { withTimezone: true }).notNull().defaultNow(),
});

export const supplierPerformance = pgTable('supplier_performance', {
  id: uuid('id').primaryKey().defaultRandom(),
  tenantId: uuid('tenant_id').notNull(),
  supplierId: uuid('supplier_id').notNull().references(() => suppliers.id),
  qualityScore: numeric('quality_score', { precision: 5, scale: 2 }).notNull(),
  deliveryScore: numeric('delivery_score', { precision: 5, scale: 2 }).notNull(),
  costScore: numeric('cost_score', { precision: 5, scale: 2 }).notNull(),
  overallScore: numeric('overall_score', { precision: 5, scale: 2 }).notNull(),
  lastUpdated: timestamp('last_updated', { withTimezone: true }).notNull(),
  createdAt: timestamp('created_at', { withTimezone: true }).notNull().defaultNow(),
  updatedAt: timestamp('updated_at', { withTimezone: true }).notNull().defaultNow(),
  updatedBy: uuid('updated_by').notNull().references(() => users.id),
});