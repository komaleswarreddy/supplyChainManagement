import { pgTable, uuid, text, timestamp, integer, numeric, jsonb, boolean } from 'drizzle-orm/pg-core';
import { users } from './users';
import { suppliers } from './suppliers';

export const requisitions = pgTable('requisitions', {
  id: uuid('id').primaryKey().defaultRandom(),
  tenantId: uuid('tenant_id').notNull(),
  requisitionNumber: text('requisition_number').notNull(),
  title: text('title').notNull(),
  description: text('description'),
  requestorId: uuid('requestor_id').notNull().references(() => users.id),
  status: text('status').notNull().default('DRAFT'),
  priority: text('priority').notNull().default('MEDIUM'),
  category: text('category').notNull(),
  department: text('department').notNull(),
  costCenter: text('cost_center').notNull(),
  projectCode: text('project_code'),
  budgetCode: text('budget_code'),
  budgetYear: integer('budget_year').notNull(),
  budgetStatus: text('budget_status').notNull().default('WITHIN_BUDGET'),
  totalAmount: numeric('total_amount', { precision: 15, scale: 2 }).notNull(),
  currency: text('currency').notNull().default('USD'),
  justification: text('justification'),
  businessPurpose: text('business_purpose').notNull(),
  deliveryLocation: jsonb('delivery_location').notNull(),
  requiredByDate: timestamp('required_by_date', { withTimezone: true }).notNull(),
  paymentTerms: text('payment_terms'),
  procurementType: text('procurement_type').notNull(),
  procurementMethod: text('procurement_method').notNull(),
  contractReference: text('contract_reference'),
  approvalWorkflow: jsonb('approval_workflow'),
  attachments: text('attachments').array(),
  submittedAt: timestamp('submitted_at', { withTimezone: true }),
  approvedAt: timestamp('approved_at', { withTimezone: true }),
  approverId: uuid('approver_id').references(() => users.id),
  createdAt: timestamp('created_at', { withTimezone: true }).notNull().defaultNow(),
  updatedAt: timestamp('updated_at', { withTimezone: true }).notNull().defaultNow(),
  createdBy: uuid('created_by').notNull().references(() => users.id),
  updatedBy: uuid('updated_by').references(() => users.id),
});

export const requisitionItems = pgTable('requisition_items', {
  id: uuid('id').primaryKey().defaultRandom(),
  tenantId: uuid('tenant_id').notNull(),
  requisitionId: uuid('requisition_id').notNull().references(() => requisitions.id),
  itemCode: text('item_code').notNull(),
  description: text('description').notNull(),
  quantity: integer('quantity').notNull(),
  unitOfMeasure: text('unit_of_measure').notNull(),
  unitPrice: numeric('unit_price', { precision: 15, scale: 2 }).notNull(),
  currency: text('currency').notNull().default('USD'),
  requestedDeliveryDate: timestamp('requested_delivery_date', { withTimezone: true }).notNull(),
  specifications: text('specifications'),
  category: text('category').notNull(),
  manufacturer: text('manufacturer'),
  partNumber: text('part_number'),
  preferredSupplier: text('preferred_supplier'),
  alternativeSuppliers: text('alternative_suppliers').array(),
  warrantyRequired: boolean('warranty_required').notNull().default(false),
  warrantyDuration: text('warranty_duration'),
  technicalSpecifications: text('technical_specifications'),
  qualityRequirements: text('quality_requirements'),
  hsCode: text('hs_code'),
  budgetCode: text('budget_code'),
  notes: text('notes'),
  createdAt: timestamp('created_at', { withTimezone: true }).notNull().defaultNow(),
  updatedAt: timestamp('updated_at', { withTimezone: true }).notNull().defaultNow(),
});

export const purchaseOrders = pgTable('purchase_orders', {
  id: uuid('id').primaryKey().defaultRandom(),
  tenantId: uuid('tenant_id').notNull(),
  poNumber: text('po_number').notNull(),
  type: text('type').notNull(),
  status: text('status').notNull().default('DRAFT'),
  supplierId: uuid('supplier_id').notNull().references(() => suppliers.id),
  orderDate: timestamp('order_date', { withTimezone: true }).notNull(),
  requiredByDate: timestamp('required_by_date', { withTimezone: true }).notNull(),
  currency: text('currency').notNull().default('USD'),
  subtotal: numeric('subtotal', { precision: 15, scale: 2 }).notNull(),
  taxTotal: numeric('tax_total', { precision: 15, scale: 2 }).notNull(),
  shippingCost: numeric('shipping_cost', { precision: 15, scale: 2 }).notNull(),
  otherCharges: numeric('other_charges', { precision: 15, scale: 2 }).notNull(),
  totalAmount: numeric('total_amount', { precision: 15, scale: 2 }).notNull(),
  paymentTerms: text('payment_terms').notNull(),
  deliveryTerms: text('delivery_terms').notNull(),
  shippingMethod: text('shipping_method').notNull(),
  deliveryAddress: jsonb('delivery_address').notNull(),
  billingAddress: jsonb('billing_address').notNull(),
  deliveryStatus: text('delivery_status').notNull().default('PENDING'),
  paymentStatus: text('payment_status').notNull().default('UNPAID'),
  approvalWorkflow: jsonb('approval_workflow'),
  notes: text('notes'),
  terms: text('terms'),
  metadata: jsonb('metadata'),
  submittedAt: timestamp('submitted_at', { withTimezone: true }),
  submittedById: uuid('submitted_by_id').references(() => users.id),
  approvedAt: timestamp('approved_at', { withTimezone: true }),
  approvedById: uuid('approved_by_id').references(() => users.id),
  sentAt: timestamp('sent_at', { withTimezone: true }),
  completedAt: timestamp('completed_at', { withTimezone: true }),
  cancelledAt: timestamp('cancelled_at', { withTimezone: true }),
  cancelledById: uuid('cancelled_by_id').references(() => users.id),
  cancellationReason: text('cancellation_reason'),
  createdAt: timestamp('created_at', { withTimezone: true }).notNull().defaultNow(),
  updatedAt: timestamp('updated_at', { withTimezone: true }).notNull().defaultNow(),
  createdBy: uuid('created_by').notNull().references(() => users.id),
  updatedBy: uuid('updated_by').references(() => users.id),
});

export const purchaseOrderItems = pgTable('purchase_order_items', {
  id: uuid('id').primaryKey().defaultRandom(),
  tenantId: uuid('tenant_id').notNull(),
  purchaseOrderId: uuid('purchase_order_id').notNull().references(() => purchaseOrders.id),
  lineNumber: integer('line_number').notNull(),
  itemCode: text('item_code').notNull(),
  description: text('description').notNull(),
  quantity: integer('quantity').notNull(),
  unitOfMeasure: text('unit_of_measure').notNull(),
  unitPrice: numeric('unit_price', { precision: 15, scale: 2 }).notNull(),
  currency: text('currency').notNull().default('USD'),
  taxRate: numeric('tax_rate', { precision: 5, scale: 2 }),
  taxAmount: numeric('tax_amount', { precision: 15, scale: 2 }),
  totalAmount: numeric('total_amount', { precision: 15, scale: 2 }).notNull(),
  requestedDeliveryDate: timestamp('requested_delivery_date', { withTimezone: true }).notNull(),
  specifications: text('specifications'),
  notes: text('notes'),
  status: text('status').notNull().default('PENDING'),
  receivedQuantity: integer('received_quantity').notNull().default(0),
  remainingQuantity: integer('remaining_quantity').notNull(),
  lastReceiptDate: timestamp('last_receipt_date', { withTimezone: true }),
  requisitionId: uuid('requisition_id').references(() => requisitions.id),
  requisitionItemId: uuid('requisition_item_id').references(() => requisitionItems.id),
  createdAt: timestamp('created_at', { withTimezone: true }).notNull().defaultNow(),
  updatedAt: timestamp('updated_at', { withTimezone: true }).notNull().defaultNow(),
});

export const procurementContracts = pgTable('procurement_contracts', {
  id: uuid('id').primaryKey().defaultRandom(),
  tenantId: uuid('tenant_id').notNull(),
  contractNumber: text('contract_number').notNull(),
  title: text('title').notNull(),
  description: text('description'),
  type: text('type').notNull(),
  status: text('status').notNull().default('DRAFT'),
  priority: text('priority').notNull(),
  supplierId: uuid('supplier_id').notNull().references(() => suppliers.id),
  startDate: timestamp('start_date', { withTimezone: true }).notNull(),
  endDate: timestamp('end_date', { withTimezone: true }).notNull(),
  value: numeric('value', { precision: 15, scale: 2 }).notNull(),
  currency: text('currency').notNull().default('USD'),
  renewalType: text('renewal_type').notNull(),
  autoRenew: boolean('auto_renew').notNull().default(false),
  renewalNotificationDays: integer('renewal_notification_days').notNull(),
  noticePeriodDays: integer('notice_period_days').notNull(),
  terms: text('terms'),
  terminationConditions: text('termination_conditions'),
  approvalWorkflow: jsonb('approval_workflow'),
  metadata: jsonb('metadata'),
  approvedAt: timestamp('approved_at', { withTimezone: true }),
  approvedById: uuid('approved_by_id').references(() => users.id),
  terminatedAt: timestamp('terminated_at', { withTimezone: true }),
  terminatedById: uuid('terminated_by_id').references(() => users.id),
  terminationReason: text('termination_reason'),
  createdAt: timestamp('created_at', { withTimezone: true }).notNull().defaultNow(),
  updatedAt: timestamp('updated_at', { withTimezone: true }).notNull().defaultNow(),
  createdBy: uuid('created_by').notNull().references(() => users.id),
  updatedBy: uuid('updated_by').references(() => users.id),
});