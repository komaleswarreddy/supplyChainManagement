import { pgTable, uuid, text, timestamp, numeric, integer, jsonb } from 'drizzle-orm/pg-core';
import { users } from './users';
import { suppliers } from './suppliers';

export const carriers = pgTable('carriers', {
  id: uuid('id').primaryKey().defaultRandom(),
  tenantId: uuid('tenant_id').notNull(),
  name: text('name').notNull(),
  code: text('code').notNull(),
  type: text('type').notNull(),
  status: text('status').notNull().default('ACTIVE'),
  contactInfo: jsonb('contact_info').notNull(),
  address: jsonb('address').notNull(),
  scacCode: text('scac_code'),
  dotNumber: text('dot_number'),
  mcNumber: text('mc_number'),
  taxId: text('tax_id').notNull(),
  insuranceInfo: jsonb('insurance_info').notNull(),
  serviceAreas: jsonb('service_areas').notNull(),
  serviceTypes: text('service_types').array().notNull(),
  transitTimes: jsonb('transit_times'),
  rates: jsonb('rates'),
  performanceMetrics: jsonb('performance_metrics'),
  contractInfo: jsonb('contract_info'),
  createdAt: timestamp('created_at', { withTimezone: true }).notNull().defaultNow(),
  updatedAt: timestamp('updated_at', { withTimezone: true }).notNull().defaultNow(),
});

export const shipments = pgTable('shipments', {
  id: uuid('id').primaryKey().defaultRandom(),
  tenantId: uuid('tenant_id').notNull(),
  shipmentNumber: text('shipment_number').notNull(),
  referenceNumber: text('reference_number'),
  carrierId: uuid('carrier_id').notNull().references(() => carriers.id),
  status: text('status').notNull().default('PLANNED'),
  origin: jsonb('origin').notNull(),
  destination: jsonb('destination').notNull(),
  pickupDate: timestamp('pickup_date', { withTimezone: true }).notNull(),
  deliveryDate: timestamp('delivery_date', { withTimezone: true }).notNull(),
  estimatedDeliveryDate: timestamp('estimated_delivery_date', { withTimezone: true }).notNull(),
  actualDeliveryDate: timestamp('actual_delivery_date', { withTimezone: true }),
  serviceLevel: text('service_level').notNull(),
  trackingNumber: text('tracking_number'),
  trackingUrl: text('tracking_url'),
  items: jsonb('items').notNull(),
  packages: jsonb('packages').notNull(),
  totalWeight: numeric('total_weight', { precision: 10, scale: 2 }).notNull(),
  weightUnit: text('weight_unit').notNull(),
  totalVolume: numeric('total_volume', { precision: 10, scale: 2 }).notNull(),
  volumeUnit: text('volume_unit').notNull(),
  freightClass: text('freight_class'),
  specialInstructions: text('special_instructions'),
  costs: jsonb('costs').notNull(),
  events: jsonb('events').notNull(),
  notes: text('notes'),
  createdAt: timestamp('created_at', { withTimezone: true }).notNull().defaultNow(),
  updatedAt: timestamp('updated_at', { withTimezone: true }).notNull().defaultNow(),
  createdBy: uuid('created_by').notNull().references(() => users.id),
});

export const loads = pgTable('loads', {
  id: uuid('id').primaryKey().defaultRandom(),
  tenantId: uuid('tenant_id').notNull(),
  loadNumber: text('load_number').notNull(),
  status: text('status').notNull().default('PLANNING'),
  shipmentIds: text('shipment_ids').array().notNull(),
  carrierId: uuid('carrier_id').references(() => carriers.id),
  equipment: jsonb('equipment').notNull(),
  loadPlan: jsonb('load_plan').notNull(),
  scheduledDate: timestamp('scheduled_date', { withTimezone: true }).notNull(),
  completedDate: timestamp('completed_date', { withTimezone: true }),
  notes: text('notes'),
  createdAt: timestamp('created_at', { withTimezone: true }).notNull().defaultNow(),
  updatedAt: timestamp('updated_at', { withTimezone: true }).notNull().defaultNow(),
  createdBy: uuid('created_by').notNull().references(() => users.id),
});

export const shippingDocuments = pgTable('shipping_documents', {
  id: uuid('id').primaryKey().defaultRandom(),
  tenantId: uuid('tenant_id').notNull(),
  shipmentId: uuid('shipment_id').notNull().references(() => shipments.id),
  type: text('type').notNull(),
  documentNumber: text('document_number').notNull(),
  issuedDate: timestamp('issued_date', { withTimezone: true }).notNull(),
  issuedById: uuid('issued_by_id').notNull().references(() => users.id),
  signedBy: text('signed_by'),
  signatureDate: timestamp('signature_date', { withTimezone: true }),
  url: text('url').notNull(),
  data: jsonb('data').notNull(),
  createdAt: timestamp('created_at', { withTimezone: true }).notNull().defaultNow(),
  updatedAt: timestamp('updated_at', { withTimezone: true }).notNull().defaultNow(),
});

export const freightInvoices = pgTable('freight_invoices', {
  id: uuid('id').primaryKey().defaultRandom(),
  tenantId: uuid('tenant_id').notNull(),
  invoiceNumber: text('invoice_number').notNull(),
  carrierId: uuid('carrier_id').notNull().references(() => carriers.id),
  shipmentIds: text('shipment_ids').array().notNull(),
  invoiceDate: timestamp('invoice_date', { withTimezone: true }).notNull(),
  dueDate: timestamp('due_date', { withTimezone: true }).notNull(),
  status: text('status').notNull().default('PENDING'),
  charges: jsonb('charges').notNull(),
  subtotal: numeric('subtotal', { precision: 15, scale: 2 }).notNull(),
  taxes: numeric('taxes', { precision: 15, scale: 2 }).notNull(),
  total: numeric('total', { precision: 15, scale: 2 }).notNull(),
  currency: text('currency').notNull().default('USD'),
  auditResults: jsonb('audit_results'),
  paymentInfo: jsonb('payment_info'),
  notes: text('notes'),
  createdAt: timestamp('created_at', { withTimezone: true }).notNull().defaultNow(),
  updatedAt: timestamp('updated_at', { withTimezone: true }).notNull().defaultNow(),
});