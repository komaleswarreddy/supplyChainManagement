import { pgTable, uuid, text, timestamp, integer, numeric, boolean, jsonb } from 'drizzle-orm/pg-core';
import { users } from './users';
import { suppliers } from './suppliers';

export const inventoryItems = pgTable('inventory_items', {
  id: uuid('id').primaryKey().defaultRandom(),
  tenantId: uuid('tenant_id').notNull(),
  itemCode: text('item_code').notNull(),
  name: text('name').notNull(),
  description: text('description').notNull(),
  category: text('category').notNull(),
  status: text('status').notNull().default('IN_STOCK'),
  minQuantity: integer('min_quantity').notNull().default(0),
  maxQuantity: integer('max_quantity'),
  reorderPoint: integer('reorder_point'),
  currentQuantity: integer('current_quantity').notNull().default(0),
  unitCost: numeric('unit_cost', { precision: 10, scale: 2 }),
  currency: text('currency').default('USD'),
  location: jsonb('location'),
  specifications: jsonb('specifications'),
  dimensions: jsonb('dimensions'),
  supplierId: uuid('supplier_id').references(() => suppliers.id),
  // Enhanced catalog fields
  sku: text('sku'),
  barcode: text('barcode'),
  productType: text('product_type').default('SIMPLE'),
  parentItemId: uuid('parent_item_id').references(() => inventoryItems.id),
  attributes: jsonb('attributes'),
  catalogStatus: text('catalog_status').default('ACTIVE'),
  catalogCategoryId: uuid('catalog_category_id'),
  brand: text('brand'),
  model: text('model'),
  images: jsonb('images'),
  seoData: jsonb('seo_data'),
  metaTitle: text('meta_title'),
  metaDescription: text('meta_description'),
  metaKeywords: text('meta_keywords'),
  urlKey: text('url_key'),
  isFeatured: boolean('is_featured').default(false),
  sortOrder: integer('sort_order').default(0),
  createdAt: timestamp('created_at', { withTimezone: true }).notNull().defaultNow(),
  updatedAt: timestamp('updated_at', { withTimezone: true }).notNull().defaultNow(),
  createdBy: uuid('created_by').references(() => users.id),
  updatedBy: uuid('updated_by').references(() => users.id),
});

export const inventoryMovements = pgTable('inventory_movements', {
  id: uuid('id').primaryKey().defaultRandom(),
  tenantId: uuid('tenant_id').notNull(),
  type: text('type').notNull(),
  referenceNumber: text('reference_number').notNull(),
  itemId: uuid('item_id').notNull().references(() => inventoryItems.id),
  quantity: integer('quantity').notNull(),
  fromLocation: jsonb('from_location'),
  toLocation: jsonb('to_location'),
  status: text('status').notNull().default('PENDING'),
  processedById: uuid('processed_by_id').references(() => users.id),
  processedAt: timestamp('processed_at', { withTimezone: true }),
  notes: text('notes'),
  createdAt: timestamp('created_at', { withTimezone: true }).notNull().defaultNow(),
  updatedAt: timestamp('updated_at', { withTimezone: true }).notNull().defaultNow(),
  createdBy: uuid('created_by').notNull().references(() => users.id),
});

export const inventoryAdjustments = pgTable('inventory_adjustments', {
  id: uuid('id').primaryKey().defaultRandom(),
  tenantId: uuid('tenant_id').notNull(),
  adjustmentNumber: text('adjustment_number').notNull(),
  itemId: uuid('item_id').notNull().references(() => inventoryItems.id),
  type: text('type').notNull(),
  quantity: integer('quantity').notNull(),
  reason: text('reason').notNull(),
  status: text('status').notNull().default('PENDING'),
  approverId: uuid('approver_id').references(() => users.id),
  approvedAt: timestamp('approved_at', { withTimezone: true }),
  notes: text('notes'),
  createdAt: timestamp('created_at', { withTimezone: true }).notNull().defaultNow(),
  updatedAt: timestamp('updated_at', { withTimezone: true }).notNull().defaultNow(),
  createdBy: uuid('created_by').notNull().references(() => users.id),
});

export const safetyStockCalculations = pgTable('safety_stock_calculations', {
  id: uuid('id').primaryKey().defaultRandom(),
  tenantId: uuid('tenant_id').notNull(),
  itemId: uuid('item_id').notNull().references(() => inventoryItems.id),
  locationId: text('location_id').notNull(),
  serviceLevel: numeric('service_level', { precision: 3, scale: 2 }).notNull(),
  leadTime: integer('lead_time').notNull(),
  leadTimeVariability: numeric('lead_time_variability', { precision: 5, scale: 2 }).notNull(),
  demandAverage: numeric('demand_average', { precision: 10, scale: 2 }).notNull(),
  demandVariability: numeric('demand_variability', { precision: 10, scale: 2 }).notNull(),
  safetyStock: integer('safety_stock').notNull(),
  calculationMethod: text('calculation_method').notNull(),
  reviewPeriod: integer('review_period').notNull(),
  lastCalculated: timestamp('last_calculated', { withTimezone: true }).notNull(),
  nextReview: timestamp('next_review', { withTimezone: true }).notNull(),
  notes: text('notes'),
  createdAt: timestamp('created_at', { withTimezone: true }).notNull().defaultNow(),
  updatedAt: timestamp('updated_at', { withTimezone: true }).notNull().defaultNow(),
  createdBy: uuid('created_by').notNull().references(() => users.id),
});

export const reorderPoints = pgTable('reorder_points', {
  id: uuid('id').primaryKey().defaultRandom(),
  tenantId: uuid('tenant_id').notNull(),
  itemId: uuid('item_id').notNull().references(() => inventoryItems.id),
  locationId: text('location_id').notNull(),
  averageDailyDemand: numeric('average_daily_demand', { precision: 10, scale: 2 }).notNull(),
  leadTime: integer('lead_time').notNull(),
  safetyStock: integer('safety_stock').notNull(),
  reorderPoint: integer('reorder_point').notNull(),
  manualOverride: boolean('manual_override').notNull().default(false),
  manualValue: integer('manual_value'),
  lastCalculated: timestamp('last_calculated', { withTimezone: true }).notNull(),
  nextReview: timestamp('next_review', { withTimezone: true }).notNull(),
  notes: text('notes'),
  createdAt: timestamp('created_at', { withTimezone: true }).notNull().defaultNow(),
  updatedAt: timestamp('updated_at', { withTimezone: true }).notNull().defaultNow(),
  createdBy: uuid('created_by').notNull().references(() => users.id),
});

export const inventoryClassifications = pgTable('inventory_classifications', {
  id: uuid('id').primaryKey().defaultRandom(),
  tenantId: uuid('tenant_id').notNull(),
  itemId: uuid('item_id').notNull().references(() => inventoryItems.id),
  locationId: text('location_id').notNull(),
  annualConsumptionValue: numeric('annual_consumption_value', { precision: 15, scale: 2 }).notNull(),
  annualConsumptionQuantity: integer('annual_consumption_quantity').notNull(),
  consumptionVariability: numeric('consumption_variability', { precision: 5, scale: 2 }).notNull(),
  abcClass: text('abc_class').notNull(),
  xyzClass: text('xyz_class').notNull(),
  combinedClass: text('combined_class').notNull(),
  abcThresholds: jsonb('abc_thresholds').notNull(),
  xyzThresholds: jsonb('xyz_thresholds').notNull(),
  manualOverride: boolean('manual_override').notNull().default(false),
  manualClass: text('manual_class'),
  lastCalculated: timestamp('last_calculated', { withTimezone: true }).notNull(),
  nextReview: timestamp('next_review', { withTimezone: true }).notNull(),
  createdAt: timestamp('created_at', { withTimezone: true }).notNull().defaultNow(),
  updatedAt: timestamp('updated_at', { withTimezone: true }).notNull().defaultNow(),
  createdBy: uuid('created_by').notNull().references(() => users.id),
});

// Product Categories table
export const productCategories = pgTable('product_categories', {
  id: uuid('id').primaryKey().defaultRandom(),
  tenantId: uuid('tenant_id').notNull(),
  name: text('name').notNull(),
  description: text('description'),
  parentId: uuid('parent_id').references(() => productCategories.id),
  level: integer('level').notNull().default(1),
  sortOrder: integer('sort_order').default(0),
  isActive: boolean('is_active').default(true),
  imageUrl: text('image_url'),
  metaTitle: text('meta_title'),
  metaDescription: text('meta_description'),
  metaKeywords: text('meta_keywords'),
  urlKey: text('url_key'),
  displayMode: text('display_mode').default('PRODUCTS'),
  pageLayout: text('page_layout').default('DEFAULT'),
  customDesign: jsonb('custom_design'),
  createdAt: timestamp('created_at', { withTimezone: true }).notNull().defaultNow(),
  updatedAt: timestamp('updated_at', { withTimezone: true }).notNull().defaultNow(),
  createdBy: uuid('created_by').notNull().references(() => users.id),
  updatedBy: uuid('updated_by').references(() => users.id),
});

// Product Attributes table
export const productAttributes = pgTable('product_attributes', {
  id: uuid('id').primaryKey().defaultRandom(),
  tenantId: uuid('tenant_id').notNull(),
  name: text('name').notNull(),
  code: text('code').notNull(),
  type: text('type').notNull(),
  isRequired: boolean('is_required').default(false),
  isSearchable: boolean('is_searchable').default(false),
  isFilterable: boolean('is_filterable').default(false),
  isComparable: boolean('is_comparable').default(false),
  isVisible: boolean('is_visible').default(true),
  isSystem: boolean('is_system').default(false),
  options: jsonb('options'),
  validationRules: jsonb('validation_rules'),
  defaultValue: text('default_value'),
  inputType: text('input_type').default('TEXT'),
  frontendLabel: text('frontend_label'),
  frontendInput: text('frontend_input'),
  sortOrder: integer('sort_order').default(0),
  createdAt: timestamp('created_at', { withTimezone: true }).notNull().defaultNow(),
  updatedAt: timestamp('updated_at', { withTimezone: true }).notNull().defaultNow(),
  createdBy: uuid('created_by').notNull().references(() => users.id),
  updatedBy: uuid('updated_by').references(() => users.id),
});

// Product Attribute Values table
export const productAttributeValues = pgTable('product_attribute_values', {
  id: uuid('id').primaryKey().defaultRandom(),
  tenantId: uuid('tenant_id').notNull(),
  itemId: uuid('item_id').notNull().references(() => inventoryItems.id),
  attributeId: uuid('attribute_id').notNull().references(() => productAttributes.id),
  value: text('value'),
  createdAt: timestamp('created_at', { withTimezone: true }).notNull().defaultNow(),
  updatedAt: timestamp('updated_at', { withTimezone: true }).notNull().defaultNow(),
});

// Product Images table
export const productImages = pgTable('product_images', {
  id: uuid('id').primaryKey().defaultRandom(),
  tenantId: uuid('tenant_id').notNull(),
  itemId: uuid('item_id').notNull().references(() => inventoryItems.id),
  url: text('url').notNull(),
  altText: text('alt_text'),
  title: text('title'),
  sortOrder: integer('sort_order').default(0),
  isPrimary: boolean('is_primary').default(false),
  isGallery: boolean('is_gallery').default(true),
  fileName: text('file_name'),
  fileSize: integer('file_size'),
  mimeType: text('mime_type'),
  dimensions: jsonb('dimensions'),
  createdAt: timestamp('created_at', { withTimezone: true }).notNull().defaultNow(),
  updatedAt: timestamp('updated_at', { withTimezone: true }).notNull().defaultNow(),
  createdBy: uuid('created_by').notNull().references(() => users.id),
});

// Product Relationships table
export const productRelationships = pgTable('product_relationships', {
  id: uuid('id').primaryKey().defaultRandom(),
  tenantId: uuid('tenant_id').notNull(),
  parentItemId: uuid('parent_item_id').notNull().references(() => inventoryItems.id),
  relatedItemId: uuid('related_item_id').notNull().references(() => inventoryItems.id),
  relationshipType: text('relationship_type').notNull(),
  position: integer('position').default(0),
  isActive: boolean('is_active').default(true),
  createdAt: timestamp('created_at', { withTimezone: true }).notNull().defaultNow(),
  updatedAt: timestamp('updated_at', { withTimezone: true }).notNull().defaultNow(),
  createdBy: uuid('created_by').notNull().references(() => users.id),
});

// Product Bundles table
export const productBundles = pgTable('product_bundles', {
  id: uuid('id').primaryKey().defaultRandom(),
  tenantId: uuid('tenant_id').notNull(),
  bundleItemId: uuid('bundle_item_id').notNull().references(() => inventoryItems.id),
  componentItemId: uuid('component_item_id').notNull().references(() => inventoryItems.id),
  quantity: integer('quantity').notNull().default(1),
  isOptional: boolean('is_optional').default(false),
  discountPercentage: numeric('discount_percentage', { precision: 5, scale: 2 }).default(0),
  discountAmount: numeric('discount_amount', { precision: 10, scale: 2 }).default(0),
  sortOrder: integer('sort_order').default(0),
  createdAt: timestamp('created_at', { withTimezone: true }).notNull().defaultNow(),
  updatedAt: timestamp('updated_at', { withTimezone: true }).notNull().defaultNow(),
  createdBy: uuid('created_by').notNull().references(() => users.id),
});

// Product Reviews table
export const productReviews = pgTable('product_reviews', {
  id: uuid('id').primaryKey().defaultRandom(),
  tenantId: uuid('tenant_id').notNull(),
  itemId: uuid('item_id').notNull().references(() => inventoryItems.id),
  customerId: uuid('customer_id').notNull().references(() => users.id),
  rating: integer('rating').notNull(),
  title: text('title'),
  review: text('review').notNull(),
  isApproved: boolean('is_approved').default(false),
  isVerifiedPurchase: boolean('is_verified_purchase').default(false),
  helpfulVotes: integer('helpful_votes').default(0),
  createdAt: timestamp('created_at', { withTimezone: true }).notNull().defaultNow(),
  updatedAt: timestamp('updated_at', { withTimezone: true }).notNull().defaultNow(),
  approvedAt: timestamp('approved_at', { withTimezone: true }),
  approvedBy: uuid('approved_by').references(() => users.id),
});

// Product Price History table
export const productPriceHistory = pgTable('product_price_history', {
  id: uuid('id').primaryKey().defaultRandom(),
  tenantId: uuid('tenant_id').notNull(),
  itemId: uuid('item_id').notNull().references(() => inventoryItems.id),
  oldPrice: numeric('old_price', { precision: 10, scale: 2 }),
  newPrice: numeric('new_price', { precision: 10, scale: 2 }).notNull(),
  changeType: text('change_type').notNull(),
  reason: text('reason'),
  effectiveDate: timestamp('effective_date', { withTimezone: true }).notNull().defaultNow(),
  createdAt: timestamp('created_at', { withTimezone: true }).notNull().defaultNow(),
  createdBy: uuid('created_by').notNull().references(() => users.id),
});